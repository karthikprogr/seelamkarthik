# -*- coding: utf-8 -*-
"""multi linear regression.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1YP7w7vIvupvXW_5BkTODh2P6QRSrkE25
"""

# a large toyota car delership rolled out used cars exchange offer for a new ar. to
# ensure a reasonable profit, the dealer needs to be able to predict the price that the
# dealership will get for used cars
import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns
from statsmodels.graphics.regressionplots import influence_plot
import statsmodels.formula.api as smf
import numpy as np

from google.colab import files
uploaded = files.upload()
file_name=list(uploaded.keys())[0]
print(file_name)

df=pd.read_csv(file_name)
df

df.shape

df.corr(numeric_only=True)

#build model
import statsmodels.formula.api as smf


model=smf.ols('MPG~WT+VOL+SP+HP',data=df).fit()

model.params

#add scatter plots for the above code
import matplotlib.pyplot as plt
plt.scatter(df['WT'],df['MPG'])
plt.scatter(df['VOL'],df['MPG'])
plt.scatter(df['SP'],df['MPG'])
plt.scatter(df['HP'],df['MPG'])

#add pair plots for the above code
sns.pairplot(df)

#t and p values
print(model.tvalues,'\n',model.pvalues)

#r squared values
(model.rsquared,model.rsquared_adj)

ml_w=smf.ols("MPG~VOL",data=df).fit()
#t and pvalue
print(ml_w.tvalues,'\n',ml_w.pvalues)

(ml_w.rsquared,ml_w.rsquared_adj)

#only comparing one thing
ml_W=smf.ols("MPG~WT",data=df).fit()
#t and pvalue
print(ml_W.tvalues,'\n',ml_W.pvalues)

(ml_w.rsquared,ml_w.rsquared_adj)

#combination of two things
ml_a=smf.ols("MPG~WT+VOL",data=df).fit()
#t and pvalue
print(ml_w.tvalues,'\n',ml_w.pvalues)

(ml_a.rsquared,ml_a.rsquared_adj)

#combination of three things
ml_a=smf.ols("MPG~WT+VOL+SP+HP",data=df).fit()
#t and pvalue
print(ml_w.tvalues,'\n',ml_w.pvalues)

(ml_a.rsquared,ml_a.rsquared_adj)

#calculating VIF
rsq_hp=smf.ols("HP~WT+VOL+SP",data=df).fit().rsquared
vif_hp=1/(1-rsq_hp)

rsq_wt=smf.ols("WT~HP+VOL+SP",data=df).fit().rsquared
vif_wt=1/(1-rsq_wt)

rsq_vol=smf.ols("VOL~HP+WT+SP",data=df).fit().rsquared
vif_vol=1/(1-rsq_vol)

rsq_sp=smf.ols("SP~HP+WT+VOL",data=df).fit().rsquared
vif_sp=1/(1-rsq_sp)

#storing vif values in a data frame
d1={'Variables':['HP','WT','VOL','SP'],'VIF':[vif_hp,vif_wt,vif_vol,vif_sp]}
Vif_frame=pd.DataFrame(d1)
Vif_frame

#test for normality for residuals (Q-Q plot)
import statsmodels.api as sm
qqplot=sm.qqplot(model.resid,line='q')
plt.title("Normal Q-Q plot of residuals")
plt.show()

list(np.where(model.resid>10))

#residual plot for homoscedasticity
def get_standardized_values(vals):
  return (vals-vals.mean())/vals.std()
plt.scatter(get_standardized_values(model.fittedvalues),
            get_standardized_values(model.resid))
plt.title('Residual Plot')
plt.xlabel('Standardized Fitted values')
plt.ylabel('Standardized residual values')
plt.show()

import statsmodels.api as sm
fig=plt.figure(figsize=(15,8))
sm.graphics.plot_regress_exog(model,'VOL',fig=fig)
plt.show()

#cooks distance
model_influence=model.get_influence()
(c,_)=model_influence.cooks_distance

#plot the influencers value using stem plot
fig=plt.figure(figsize=(20,7))
plt.stem(np.arange(len(df)),np.round(c,3))
plt.xlabel('Row index')
plt.ylabel('Cooks distance')
plt.show()

#index and value of influencer where c is more than 5
np.argmax(c),np.max(c)

#high influence points
from statsmodels.graphics.regressionplots import influence_plot
influence_plot(model,figsize=(15,7))
influence_plot(model,alpha=0.5)
influence_plot(model)
plt.show()

k=df.shape[1]
n=df.shape[0]
leverage_cutoff=3*((k+1)/n)
leverage_cutoff

df[df.index.isin([70,76])]

#see the differences in hp and other variables values
df.head()

cars_new=pd.read_csv(file_name)
cars_new

from google.colab import files
uploaded = files.upload()
file_name=list(uploaded.keys())[0]
print(file_name)

#discard the data points which are influencers and reasign the row number (rest_index())
car1=cars_new.drop(df.index[[70,76]],axis=0).reset_index()
car1

#discard the data points which are influencers and reasign the row number (rest_index())
car1=cars_new.drop(df.index[[70,76]],axis=0).reset_index()

# Drop the 'index' column from car1 DataFrame
car1=car1.drop(['index'],axis=1)
car1

#exclude variables "WT" and generate r_squared and AIC values
model_new=smf.ols('MPG~VOL+SP+HP',data=car1).fit()
(model_new.rsquared,model_new.aic)

(final_ml_v.rsquared,final_ml_v.aic)