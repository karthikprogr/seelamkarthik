# -*- coding: utf-8 -*-
"""decision_tree_iris.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1S5WfcKXZhipTjYQtYWI2z1iLTGBYDneI
"""

import pandas as pd
import matplotlib.pyplot as plt
from sklearn import datasets
import numpy as np
from sklearn.model_selection import train_test_split
from sklearn.tree import DecisionTreeClassifier
from sklearn import tree
from sklearn import preprocessing
from sklearn.metrics import classification_report
from sklearn.metrics import mean_squared_error

from google.colab import drive
drive.mount('/content/drive')

file_name="/content/iris.csv"

data=pd.read_csv(file_name)
df=pd.DataFrame(data)
df

df.info()

df.shape

#convert the categorical in to numerical for Species
label_encoder = preprocessing.LabelEncoder()
df['Species']= label_encoder.fit_transform(df['Species'])
df['Species']

#dependent variable and independent variable
#target variable is Species
# dependent variable = species
# independent variable = sepal_length,sepal_width,petal_length,petal_width

#import some data to play with
iris=pd.read_csv('iris.csv',index_col=0)
iris

#rename the species to flower_type
iris=iris.rename(columns={"Species":"Flowers_types"})
iris

#complete iris dataset
label_encoder=preprocessing.LabelEncoder()
iris['Flowers_types']=label_encoder.fit_transform(iris['Flowers_types'])
iris['Flowers_types'] #to see only the flower_types
#iris #to see the total dataset

x=iris.iloc[:,0:4]
x

y=iris['Flowers_types']
y

iris['Flowers_types'].unique()

iris.Flowers_types.value_counts()

#splitting the data
x_train,x_test,y_train,y_test=train_test_split(x,y,test_size=0.2,random_state=400)

"""Building decision Tree Classifier"""

#building decision treee classifier
from sklearn.tree import DecisionTreeClassifier
model_gini=DecisionTreeClassifier(criterion='gini',max_depth=3)
model_gini.fit(x_train,y_train)

preds=model_gini.predict(x_test)
print(preds)
pd.Series(preds).value_counts()

"""**Entropy:** a measure of randomness or disorder in a set of data"""

#building decision treee classifier
from sklearn.tree import DecisionTreeClassifier
model=DecisionTreeClassifier(criterion='entropy',max_depth=3)
model.fit(x_train,y_train)

#plot the decision tree
tree.plot_tree(model);







